#!/usr/bin/env python3
#
# This one is invoked "locally", not across N OSes with various ancient
# Python3, so assume modern Py3 features such as f'string' interpolation.

"""
caching_invalidate: Invalidate CloudFront caches for a given machine

Should probably collapse more tooling into one.
"""

__author__ = 'phil@pennock-tech.com (Phil Pennock)'

import argparse
import functools
import json
import os
import sys
import time

import boto3

_DEF_DEPLOY_CONFIGFN = 'confs/machines.json'

# Need to rethink which configs exist, what's in each one, etc
GROSS_HACK_PROFILEMAP = {
    'pennocktech': 'pennocktech-website',
    }

class Error(Exception):
  """Base class for exceptions from caching_invalidate."""
  pass


class Verbose(object):
  def __init__(self, level, *tags):
    self.level = level
    self.tags = tags
    self.prefix = ''
    if tags:
      self.prefix = '[' + ']['.join(tags) + '] '

  def print(self, item, level=1):
    if level > self.level:
      return
    print(self.prefix, item, sep='', file=sys.stderr, flush=True)

@functools.lru_cache(maxsize=4)
def Get_AWS_Session(profile_name):
  return boto3.Session(profile_name=profile_name)


class MachinesConfig(object):
  def __init__(self, options):
    self.options = options
    self.deploy_cfg = json.load(open(options.deploy_config_file))
    self.invalidation_ref_prefix = time.strftime('%Y%m%d%H%M%S') + '-' + str(os.getpid()) + '-'

  def Verbose(self, *tags):
    return Verbose(self.options.verbose, *tags)

  def _cfg_for_machine(self, name):
    found = None
    for item in self.deploy_cfg:
      if item['name'] == name:
        if found is not None:
          raise Error(f'Duplicate machine definitions found for {name!r}')
        found = item
    if found is None:
      raise Error(f'No machine {name!r} found')
    return found

  def invalidate(self, machine):
    cfg = self._cfg_for_machine(machine)
    v = self.Verbose(machine)
    if 'repo_endpoints' not in cfg:
      v.print('no repo_endpoints in JSON, no deploys', level=0)
      return
    ep_index = -1
    for endpoint in cfg['repo_endpoints']:
      if 'spec' not in endpoint:
        v.print(f'skipping endpoint missing "spec" field: {endpoint}')
        continue
      spec = endpoint['spec']
      if 'aws_cloudfront' not in endpoint:
        v.print(f'skipping non-cloudfront endpoint {endpoint["spec"]}')
        continue
      cf_distribution = endpoint['aws_cloudfront']
      v.print(f'{spec!r} dist {cf_distribution!r}', level=0)
      if endpoint.get('aws_profile', None) not in GROSS_HACK_PROFILEMAP:
        v.print(f'{spec!r} missing aws_profile or not handled in our GROSS HACK')
        continue
      local_profile = GROSS_HACK_PROFILEMAP[endpoint['aws_profile']]
      s3_path_inval = spec[spec.index(':')+1:]
      s3_path_inval = '/' + s3_path_inval[s3_path_inval.index(':')+1:] + '/*'

      # Roughly the shell command to use:
      v.print(f'AWS_PROFILE={local_profile} aws cloudfront create-invalidation --distribution-id {cf_distribution} --paths "{s3_path_inval}"')

      ep_index+=1
      refname = self.invalidation_ref_prefix + str(ep_index) + '-' + machine
      session = Get_AWS_Session(local_profile)
      cf = session.client('cloudfront')
      response = cf.create_invalidation(
          DistributionId=cf_distribution,
          InvalidationBatch={
            'Paths': {
              'Quantity': 1,
              'Items': [ s3_path_inval ],
            },
            'CallerReference': refname,
            })
      v.print(response, level=0)

def _main(args, argv0):
  parser = argparse.ArgumentParser(
      description=__doc__,
      formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument('-v', '--verbose',
                      action='count', default=0,
                      help='Be more verbose')
  parser.add_argument('--deploy-config-file', default=_DEF_DEPLOY_CONFIGFN, metavar='conffile',
                      help='Information with deploys for packages from a given machine [%(default)s]')
  parser.add_argument('machines', nargs='+', metavar='machine',
                      help='machines to act upon')
  options = parser.parse_args(args=args)

  mconf = MachinesConfig(options)
  for machine in options.machines:
    mconf.invalidate(machine)


if __name__ == '__main__':
  argv0 = sys.argv[0].rsplit('/')[-1]
  rv = _main(sys.argv[1:], argv0=argv0)
  sys.exit(rv)

# vim: set ft=python sw=2 expandtab :
